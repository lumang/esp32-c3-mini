; PlatformIO Project Configuration File
;
;   Build options: build flags, source filter
;   Upload options: custom upload port, speed and extra flags
;   Library options: dependencies, extra library storages
;   Advanced options: extra scripting
;
; Please visit documentation for the other options and examples
; https://docs.platformio.org/page/projectconf.html

[platformio]
default_envs = emulator_64bits

[env]
lib_deps = lvgl/lvgl@^8.3.1
build_flags = 
  ; -D LV_LVGL_H_INCLUDE_SIMPLE

[env:emulator_64bits]
platform = native@^1.1.3
extra_scripts = support/sdl2_build_extra.py
build_flags =
  ${env.build_flags}
  ; -D LV_LOG_LEVEL=LV_LOG_LEVEL_INFO
  ; -D LV_LOG_PRINTF=1
  ; Add recursive dirs for hal headers search
  !python -c "import os; print(' '.join(['-I {}'.format(i[0].replace('\x5C','/')) for i in os.walk('hal/sdl2')]))"
  ; -arch arm64 ; MACOS with apple silicon (eg M1)
  -L C:/msys64/mingw64/lib/ ; Windows
  -lSDL2
  ; SDL drivers options
  -D LV_LVGL_H_INCLUDE_SIMPLE
  ; -D LV_CONF_INCLUDE_SIMPLE
  -D LV_CONF_PATH="${PROJECT_DIR}/include/lv_conf.h"
  -D LV_MEM_CUSTOM=1
  -D LV_DRV_NO_CONF
  -D USE_SDL
  -D SDL_HOR_RES=240
  -D SDL_VER_RES=240  
  -D SDL_ZOOM=1
  -D SDL_INCLUDE_PATH="\"C:/Users/ss/Downloads/gsm-weather-s3-simulator-master/visual_studio_2017_sdl/SDL2/include/SDL.h\"" ; Windows
  ; -D SDL_INCLUDE_PATH="\"SDL2/SDL.h"\" ;MACOS
  ; !find /opt/homebrew/Cellar/sdl2 -name "include" | sed "s/^/-I /" ;MACOS
  ; !find /opt/homebrew/Cellar/sdl2 -name "libSDL2.a" | xargs dirname | sed "s/^/-L /" ;MACOS

  
lib_deps =
  ${env.lib_deps}
  ; Use direct URL, because package registry is unstable
  ;lv_drivers@~8.2.0
  lv_drivers=https://github.com/lvgl/lv_drivers/archive/refs/tags/v8.2.0.zip
build_src_filter =
  +<*>
  +<../hal/sdl2>

[env:emulator_32bits]
extends = env:emulator_64bits
build_flags =
  ${env:emulator_64bits.build_flags}
  -m32
build_src_filter =
  ${env:emulator_64bits.build_src_filter}


[esp32]
lib_deps = 
	${env.lib_deps}
	lovyan03/LovyanGFX@^0.4.18
	fbiego/ChronosESP32@^1.4.0
	fbiego/Timber@^1.0.0
build_flags = 
  ; Add recursive dirs for hal headers search
  !python -c "import os; print(' '.join(['-I {}'.format(i[0].replace('\x5C','/')) for i in os.walk('hal/esp32')]))"
  -D LV_CONF_PATH="${PROJECT_DIR}/include/lv_conf.h"
  -I lib
  -D LV_TICK_CUSTOM=1
  -D LV_MEM_CUSTOM=0
build_src_filter =
  +<*>
  +<../hal/esp32>

; ESP32-C3 LVGL 1.28 Inch 240x240
[env:lolin_c3_mini]
platform = espressif32
platform_packages = toolchain-riscv32-esp @ 8.4.0+2021r2-patch5
board = lolin_c3_mini
framework = arduino
board_build.partitions = partitions.csv
lib_deps = 
	${esp32.lib_deps}
build_flags = 
  ${esp32.build_flags}
	-D ESPC3=1
build_src_filter =
  ${esp32.build_src_filter}

; ESP32-S3-Touch-LCD-1.28
[env:lolin_s3_mini_1_28]
platform = espressif32
platform_packages = toolchain-riscv32-esp @ 8.4.0+2021r2-patch5
board = lolin_s3_mini
framework = arduino
board_build.partitions = partitions.csv
lib_deps = 
	${esp32.lib_deps}
build_flags = 
  ${esp32.build_flags}
	-D ESPS3_1_28=1
build_src_filter =
  ${esp32.build_src_filter}

; ESP32-S3-Touch-LCD-1.69
[env:lolin_s3_mini_1_69]
platform = espressif32
platform_packages = toolchain-riscv32-esp @ 8.4.0+2021r2-patch5
board = lolin_s3_mini
framework = arduino
board_build.partitions = partitions.csv
lib_deps = 
	${esp32.lib_deps}
build_flags = 
  ${esp32.build_flags}
	-D ESPS3_1_69=1
build_src_filter =
  ${esp32.build_src_filter}

[env:esp32doit-devkit-v1]
platform = espressif32
platform_packages = toolchain-riscv32-esp @ 8.4.0+2021r2-patch5
board = esp32doit-devkit-v1
framework = arduino
board_build.partitions = partitions.csv
lib_deps = 
	${esp32.lib_deps}
build_flags = 
  ${esp32.build_flags}
build_src_filter =
  ${esp32.build_src_filter}